#!/bin/sh

## OS/ENVIRONMENT INFO DETECTION

ostype="$(uname)"

version=8.4.3
font=nerd
distrotype=none
osi=""
ki=""
ri="󰍛"
pi="󰏔"
ui="󰅶"
ci=""
si=""
wi=""
ti=""
cpui="󰻠"
gi="󰢮"

case $1 in
"-p")
	font=phosphor
	osi=""
	ki=""
	ri=""
	pi=""
	ui=""
	ci=""
	si=""
	wi=""
	ti=""
	cpui=""
	gi=""
	;;
"-c")
	font=cozette
	ki="♥"
	ri=""
	pi=""
	ui=""
	ci=""
	si=""
	wi=""
	ti=""
	cpui=""
	gi=""
	;;
"-e")
	font=emoji
	osi="🐧"
	ki="💓"
	ri="🐐"
	pi="📦"
	ui="☕"
	ci="🎨"
	si="🐚"
	wi="🪟"
	ti="💻"
	cpui="🔥"
	gi="🎮"
	;;
"-v")
	echo "NerdFetch $version"
	exit
	;;
"-h"|"--help")
	echo "Flags:
-c: Cozette font
-p: Phosphor font
-e: Emoji font
-v: Version"
	exit
	;;
esac

if command -v getprop 1>/dev/null 2>&1; then
	distrotype=android
fi
kernel=$(uname -r)
kernel=${kernel%%-*}
case $ostype in
*"Linux"*)
	if [ $distrotype = android ]; then
		host="$(hostname)"
		USER="$(whoami)"
		os="Android $(getprop ro.build.version.release)"
		case $font in
		phosphor) osi="" ;;
		emoji) osi="🤖" ;;
		*) osi="󰀲" ;;
		esac
	else
		host="$(cat /proc/sys/kernel/hostname)"
		. /etc/os-release
		if [ -f /bedrock/etc/bedrock-release ]; then
			os="$(brl version)"
		else
			os="${PRETTY_NAME}"
			if [ $font = nerd ]; then
				case ${ID%% *} in
				debian) osi="" ;;
				arch) osi="󰣇" ;;
				endeavouros) osi="" ;;
				fedora) osi="" ;;
				gentoo) osi="" ;;
				rhel) osi="" ;;
				slackware) osi="" ;;
				void) osi="" ;;
				alpine) osi="" ;;
				nixos) osi="󱄅" ;;
				artix) osi="" ;;
				exherbo) osi="󰆚" ;;
				mageia) osi="" ;;
				manjaro) osi="" ;;
				opensuse) osi="" ;;
				solus) osi="" ;;
				ubuntu) osi="" ;;
				linuxmint) osi="󰣭" ;;
				trisquel) osi="" ;;
				puppy) osi="" ;;
				coreos) osi="" ;;
				mx) osi="" ;;
				vanilla) osi="" ;;
				pop_os) osi="" ;;
				raspbian) osi="" ;;
				deepin) osi="" ;;
				almalinux) osi="" ;;
				garuda) osi="" ;;
				centos) osi="" ;;
				rocky) osi="" ;;
				esac
			elif [ $font = cozette ]; then
				case ${ID%% *} in
				debian) osi="" ;;
				arch) osi="" ;;
				fedora) osi="" ;;
				gentoo) osi="" ;;
				slackware) osi="" ;;
				void) osi="" ;;
				alpine) osi="" ;;
				nixos) osi="" ;;
				mageia) osi="" ;;
				manjaro) osi="" ;;
				opensuse) osi="" ;;
				ubuntu) osi="" ;;
				linuxmint) osi="" ;;
				coreos) osi="" ;;
				centos) osi="" ;;
				esac
			fi
		fi
	fi
	;;
*"Darwin"*)
	host="$(hostname -f | sed -e 's/^[^.]*\.//')"
	mac_product="$(/usr/libexec/PlistBuddy -c "Print:ProductName" /System/Library/CoreServices/SystemVersion.plist)"
	mac_version="$(/usr/libexec/PlistBuddy -c "Print:ProductVersion" /System/Library/CoreServices/SystemVersion.plist)"
	os="${mac_product} ${mac_version}"
	case $font in
	nerd) osi="" ;;
	phosphor) osi="" ;;
	cozette) osi="" ;;
	emoji) osi="🍎" ;;
	esac
	;;
*"FreeBSD"*)
	host="$(hostname)"
	distrotype=bsd
	os="FreeBSD $(freebsd-version | sed 's/-.*//')"
	case $font in
	nerd) osi="" ;;
	phosphor) osi="" ;;
	cozette) osi="" ;;
	emoji) osi="😈" ;;
	esac
	;;
*"OpenBSD"*)
	host="$(hostname)"
	distrotype=bsd
	os="OpenBSD $(uname -r)"
	case $font in
	nerd) osi="" ;;
	phosphor) osi="" ;;
	cozette) osi="⌘" ;;
	emoji) osi="🐡" ;;
	esac
	;;
*"NetBSD"*)
	host="$(hostname)"
	distrotype=netbsd
	os="NetBSD $(uname -r)"
	case $font in
	nerd) osi="󰉀" ;;
	phosphor) osi="" ;;
	cozette) osi="" ;;
	emoji) osi="🚩" ;;
	esac
	;;
*)
	os="Unix-like"
	host="host"
	;;
esac

## PACKAGE MANAGER AND PACKAGES DETECTION

MANAGER=$(for x in nix-env pkg flatpak yum zypper dnf rpm dpkg-query brew port pacman xbps-query emerge cave apk kiss pmm /usr/sbin/slackpkg bulge birb yay paru pacstall cpm pmm opkg eopkg getprop; do command -v $x; done 2>/dev/null)
manager=${MANAGER##*/}
if [ $distrotype = netbsd ]; then
	manager="pkg_info-netbsd"
fi
case $manager in
cpm) packages="$(cpm C)" ;;
flatpak) packages="$(flatpak list --app | wc -l)" ;;
brew) packages="$(printf '%s\n' "$(brew --cellar)/"* | wc -l)" ;;
port) packages="$(($(port installed | wc -l) - 1))" ;;
dpkg-query) packages="$(dpkg-query -f '${binary:Package}\n' -W | wc -l)" ;;
rpm) packages="$(rpm -qa --last | wc -l)" ;;
yum) packages="$(yum list installed | wc -l)" ;;
dnf) packages="$(dnf list installed | wc -l)" ;;
zypper) packages="$(zypper se | wc -l)" ;;
pacman) packages="$(pacman -Q | wc -l)" ;;
yay) packages="$(yay -Q | wc -l)" ;;
paru) packages="$(paru -Q | wc -l)" ;;
pacstall) packages="$(pacstall -L | wc -l)" ;;
kiss) packages="$(kiss list | wc -l)" ;;
emerge) packages="$(qlist -I | wc -l)" ;;
pkg) packages="$(pkg info | wc -l | tr -d ' ')" ;;
cave) packages="$(cave show installed-slots | wc -l)" ;;
xbps-query) packages="$(xbps-query -l | wc -l)" ;;
nix-env) packages="$(nix-store -q --requisites /run/current-system/sw | wc -l)" ;;
apk) packages="$(apk list --installed | wc -l)" ;;
pmm) packages="$(/bedrock/libexec/pmm pacman pmm -Q 2>/dev/null | wc -l)" ;;
opkg) packages="$(opkg list-installed | wc -l)" ;;
eopkg) packages="$(eopkg li | wc -l)" ;;
slackpkg) packages="$(ls /var/log/packages | wc -l)" ;;
bulge) packages="$(bulge list | wc -l)" ;;
birb) packages="$(birb --list-installed | wc -l)" ;;
pkg_info)
	packages="$(pkg_info -A | wc -l)"
	manager="pkg"
	;;
pkg_info-netbsd)
	packages="$(pkg_info -a | wc -l)"
	manager="pkg"
	;;
*)
	if [ $distrotype = android ]; then
		packages="$(pkg list-installed 2>/dev/null | wc -l)"
		manager="pkg"
	else
		packages="$(ls /usr/bin | wc -l)"
		manager="bin"
	fi
	;;
esac

packages="${packages#"${packages%%[![:space:]]*}"}"
manager=${manager%-query}

## UPTIME DETECTION

if [ $distrotype = android ]; then
	uptime="$(uptime -p | cut -c 4-)"
elif [ $distrotype = bsd ] || [ $distrotype = netbsd ]; then
	uptime="$(uptime | sed -e 's/.* up //; s/, [0-9]* user.*//')"
else
	case $ostype in
	*"Linux"*)
		IFS=. read -r s _ </proc/uptime
		;;
	*)
		s=$(sysctl -n kern.boottime)
		s=${s#*=}
		s=${s%,*}
		s=$(($(date +%s) - s))
		;;
	esac
	d="$((s / 60 / 60 / 24))"
	h="$((s / 60 / 60 % 24))"
	m="$((s / 60 % 60))"
	# Plurals
	[ "$d" -gt 1 ] && dp=s
	[ "$h" -gt 1 ] && hp=s
	[ "$m" -gt 1 ] && mp=s
	[ "$s" -gt 1 ] && sp=s
	# Hide empty fields.
	[ "$d" = 0 ] && d=
	[ "$h" = 0 ] && h=
	[ "$m" = 0 ] && m=
	[ "$d$h$m" != "" ] && s=
	# Make the output of uptime smaller.
	[ "$d" ] && uptime="$d day$dp, "
	[ "$h" ] && uptime="$uptime$h hour$hp, "
	[ "$m" ] && uptime="$uptime$m min$mp"
	[ "$s" ] && uptime="$uptime$s sec$sp"
	uptime=${uptime%, }
fi

## RAM DETECTION

case $ostype in
*"Linux"*)
	while IFS=':k ' read -r key val _; do
		case $key in
		MemTotal)
			mem_used=$((mem_used + val))
			mem_full=$val
			;;
		Shmem) mem_used=$((mem_used + val)) ;;
		MemFree | Buffers | Cached | SReclaimable) mem_used=$((mem_used - val)) ;;
		esac
	done </proc/meminfo
	mem_used=$((mem_used / 1024 / 1024))
	mem_full=$((mem_full / 1024 / 1024))
	;;
*"Darwin"*)
	mem_full=$(($(sysctl -n hw.memsize) / 1024 / 1024))
	[ $mem_full -gt 0 ] || mem_full=$(expr $(sysctl -n hw.memsize) / 1024 / 1024)
	while IFS=:. read -r key val _; do
		case $key in
		'Anonymous '*|*' wired'* | *' occupied'*)
			mem_used=$((mem_used + ${val:-0}))
			;;
		*' purgeable'*)
			mem_used=$((mem_used - ${val:-0}))
			;;
		esac
	done <<-EOF
		$(vm_stat)
	EOF

	mem_used=$((mem_used * ( $(sysctl -n vm.pagesize) / 1024 ) / 1024))
	;;
*"BSD"*)
	mem_full=$(($(sysctl -n hw.physmem) / 1024 / 1024))
	[ $mem_full -gt 0 ] || mem_full=$(expr $(sysctl -n hw.physmem) / 1024 / 1024)
	if [ $distrotype = netbsd ]; then
		mem_free=$(($(vmstat | awk 'NR==3 {print $4}') / 1024))
	else
		mem_free=$(($(sysctl -n vm.stats.vm.v_free_count) * ( $(sysctl -n vm.stats.vm.v_page_size) / 1024 ) / 1024))
	fi
	mem_used=$((mem_full - mem_free))
	;;
*)
	mem_full=1
	mem_used=0
	;;
esac
memstat="${mem_used}/${mem_full} GiB"
mempercent='('$((mem_used * 100 / mem_full))'%)'

## SHELL DETECTION
shell="$(basename "$SHELL")"

## WM/DE DETECTION
if [ -n "$XDG_CURRENT_DESKTOP" ]; then
	wm="$XDG_CURRENT_DESKTOP"
elif [ -n "$DESKTOP_SESSION" ]; then
	wm="$DESKTOP_SESSION"
elif [ -n "$WAYLAND_DISPLAY" ]; then
	wm="Wayland"
elif [ -n "$DISPLAY" ]; then
	wm="X11"
else
	wm="TTY"
fi

## TERMINAL DETECTION
if [ -n "$TERM_PROGRAM" ]; then
	terminal="$TERM_PROGRAM"
elif [ -n "$KITTY_WINDOW_ID" ]; then
	terminal="kitty"
elif [ -n "$ALACRITTY_SOCKET" ]; then
	terminal="alacritty"
elif [ -n "$WEZTERM_UNIX_SOCKET" ]; then
	terminal="wezterm"
else
	terminal="$(ps -o comm= -p "$PPID" 2>/dev/null || echo "$TERM")"
fi

## CPU DETECTION
case $ostype in
*"Linux"*)
	cpu="$(awk -F': ' '/model name/ {print $2; exit}' /proc/cpuinfo)"
	cpu="${cpu% @*}"  # Remove @ freq
	cpu="${cpu//Intel(R) /}"
	cpu="${cpu//Core(TM) /}"
	cpu="${cpu// CPU/}"
	cpu="${cpu//AMD /}"
	;;
*"Darwin"*)
	cpu="$(sysctl -n machdep.cpu.brand_string)"
	;;
*"BSD"*)
	cpu="$(sysctl -n hw.model)"
	;;
*)
	cpu="Unknown"
	;;
esac

## GPU DETECTION
case $ostype in
*"Linux"*)
	if command -v lspci >/dev/null 2>&1; then
		# Get all GPUs
		gpu_list="$(lspci 2>/dev/null | grep -i 'vga\|3d\|display' | sed 's/.*: //')"
		gpu_count="$(echo "$gpu_list" | wc -l)"

		# Process first GPU (or only GPU)
		gpu="$(echo "$gpu_list" | head -n1)"
		gpu="${gpu//Intel Corporation /}"
		gpu="${gpu//NVIDIA Corporation /}"
		gpu="${gpu//Advanced Micro Devices, Inc. /}"
		gpu="${gpu//\[AMD\/ATI\] /}"
		gpu="${gpu// \(rev [0-9a-f]*\)/}"

		# Try to detect VRAM for AMD/NVIDIA
		vram_info=""

		# Check for NVIDIA GPU and nvidia-smi
		if echo "$gpu" | grep -qi "nvidia\|geforce\|quadro" && command -v nvidia-smi >/dev/null 2>&1; then
			vram_used="$(nvidia-smi --query-gpu=memory.used --format=csv,noheader,nounits 2>/dev/null | head -n1)"
			vram_total="$(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits 2>/dev/null | head -n1)"
			if [ -n "$vram_used" ] && [ -n "$vram_total" ] && [ "$vram_total" -gt 0 ]; then
				vram_used_gb=$((vram_used / 1024))
				vram_total_gb=$((vram_total / 1024))
				vram_percent=$((vram_used * 100 / vram_total))
				vram_info=" ${vram_used_gb}/${vram_total_gb}GB (${vram_percent}%)"
			fi
		# Check for AMD GPU in sysfs
		elif [ -d /sys/class/drm ]; then
			for card in /sys/class/drm/card*/device; do
				if [ -f "$card/mem_info_vram_total" ]; then
					vram_total="$(cat "$card/mem_info_vram_total" 2>/dev/null || echo 0)"
					vram_used="$(cat "$card/mem_info_vram_used" 2>/dev/null || echo 0)"
					if [ "$vram_total" -gt 0 ]; then
						vram_total_gb=$((vram_total / 1024 / 1024 / 1024))
						vram_used_gb=$((vram_used / 1024 / 1024 / 1024))
						vram_percent=$((vram_used * 100 / vram_total))
						vram_info=" ${vram_used_gb}/${vram_total_gb}GB (${vram_percent}%)"
						break
					fi
				fi
			done
		fi

		# For Intel integrated, note it's shared memory
		if echo "$gpu" | grep -qi "intel.*graphics\|uhd.*graphics\|iris" && [ -z "$vram_info" ]; then
			vram_info=" (Shared)"
		fi

		gpu="${gpu}${vram_info}"

		# If multiple GPUs, append second one
		if [ "$gpu_count" -gt 1 ]; then
			gpu2="$(echo "$gpu_list" | sed -n '2p')"
			gpu2="${gpu2//Intel Corporation /}"
			gpu2="${gpu2//NVIDIA Corporation /}"
			gpu2="${gpu2//Advanced Micro Devices, Inc. /}"
			gpu2="${gpu2//\[AMD\/ATI\] /}"
			gpu2="${gpu2// \(rev [0-9a-f]*\)/}"
			gpu="${gpu} | ${gpu2}"
		fi
	else
		gpu="N/A"
	fi
	;;
*"Darwin"*)
	gpu="$(system_profiler SPDisplaysDataType 2>/dev/null | awk -F': ' '/Chipset Model/ {print $2; exit}')"
	vram="$(system_profiler SPDisplaysDataType 2>/dev/null | awk -F': ' '/VRAM/ {print $2; exit}')"
	[ -n "$vram" ] && gpu="${gpu} (${vram})"
	;;
*)
	gpu="N/A"
	;;
esac
[ -z "$gpu" ] && gpu="N/A"

## DEFINE COLORS

ESC="$(printf '\033')"
bold="${ESC}[1m"
black="${ESC}[30m"
red="${ESC}[31m"
green="${ESC}[32m"
yellow="${ESC}[33m"
blue="${ESC}[34m"
magenta="${ESC}[35m"
cyan="${ESC}[36m"
white="${ESC}[37m"
grey="${ESC}[90m"
reset="${ESC}[0m"

## USER VARIABLES -- YOU CAN CHANGE THESE

lc="${reset}${bold}${magenta}" # labels
nc="${reset}${bold}${yellow}"  # user
hn="${reset}${bold}${blue}"    # hostname
ic="${reset}${green}"          # info
c0="${reset}${grey}"           # first color
c1="${reset}${white}"          # second color
c2="${reset}${yellow}"         # third color

## OUTPUT

cat <<EOF

${c0}                    .   .${cyan}xXXXX${white}+${c0}.   .                ${nc}${USER}${cyan}@${reset}${hn}${host}${reset}
${c0}               .   ..   ${cyan}xXXXX${white}+${c0}.-   ..   .           ${lc}${osi}  ${ic}${os}${reset}
${c0}         .   ..  ... ..${cyan}xXXXX${white}+${c0}. --.. ...  ..   .     ${lc}${ki}  ${ic}${kernel}${reset}
${c0}     .   ..  ... .....${cyan}xXXXX${white}+${c0}.  -.-..... ...  ..   . ${lc}${ri}  ${ic}${memstat} ${mempercent}${reset}
${c0}   .   ..  ... ......${cyan}xXXXX${white}+${c0}.  . .--...... ...  ..   ${lc}${pi}  ${ic}${packages} (${manager})${reset}
${c0}  .   ..  ... ......${cyan}xXXXX${white}+${c0}.    -.- -...... ...  ..  ${lc}${ui}  ${ic}${uptime}${reset}
${c0} .   ..  ... ......${cyan}xXXXX${white}+${c0}.   .-+-.-.-...... ...  .. ${lc}${si}  ${ic}${shell}${reset}
${c0} .   ..  ... .....${cyan}xXXXX${white}+${c0}. . --${cyan}xx${white}+${c0}.-.--..... ...  ..  ${lc}${wi}  ${ic}${wm}${reset}
${c0}.   ..  ... .....${cyan}xXXXX${white}+${c0}. - .-${cyan}xxxx${white}+${c0}- .-- .... ...  .. ${lc}${ti}  ${ic}${terminal}${reset}
${c0} .   ..  ... ...${cyan}xXXXX${white}+${c0}.  -.-${cyan}xxxxxx${white}+ ${c0}.---... ...  ..  ${lc}${cpui}  ${ic}${cpu}${reset}
${c0} .   ..  ... ..${cyan}xXXXX${white}+${c0}. .---..${magenta}xxxxxx${white}+${c0}-..--.. ...  ..  ${lc}${gi}  ${ic}${gpu}${reset}
${c0}  .   ..  ... ${cyan}xXXXX${white}+${c0}. . --....${magenta}xxxxxx${white}+  ${c0}-.- ...  ..
${c0}   .   ..  ..${cyan}xXXXX${white}+${c0}. . .-......${magenta}xxxxxx${white}+${c0}-. --..  ..
${c0}     .   .. ${cyan}xXXXXXXXXXXXXXXXXXXX${magenta}xxxxxx${white}+${c0}. .-- ..
${c0}         . ${cyan}xXXXXXXXXXXXXXXXXXXXXX${magenta}xxxxxx${white}+${c0}.  --
${c0}           ${cyan}xxxxxxxxxxxxxxxxxxx${magenta}xxxxxxxxxx${white}+${c0}.--
${c0}            ${cyan}xxxxxxxxxxxxxxxxxxxx${magenta}xxxxxxxxx${white}+${c0}-     ${lc}${ci}  ${red}███${green}███${yellow}███${blue}███${magenta}███${cyan}███${reset}
EOF
